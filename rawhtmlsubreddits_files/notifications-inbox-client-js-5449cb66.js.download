import{ao as e,l as t,aG as i,aH as s,aR as n,W as o,f as a,g as r,k as d,q as c,a as l,_ as h,n as u,t as p,e as b,eY as f,cW as m,ha as g,b as v,c as k,a4 as y,cJ as S,hb as w,hc as I,hd as C,he as E,A as _,w as T}from"./shell-ceb66a5c.js";import{c as N}from"./index-18b99d92.js";import{A as x,x as U,s as P,bE as L,I as A,c as D}from"./icon-04f6a077.js";import{p as R,s as B}from"./utils-d0779677.js";import{l as O}from"./list-item-b879d870.js";import"./faceplate-dropdown-menu-f1045f04.js";import"./faceplate-menu-210a1c41.js";import"./shreddit-spoiler-363d57a0.js";import"./popper-controller-d9d10574.js";import"./makeEventDispatcher-28989282.js";var M;e.Inbox,e.MiniInbox,function(e){e.HideNotification="hide_notification",e.HideSubreddit="hide_subreddit",e.HideUpdates="hide_updates",e.DisableNotificationType="disable_notification_type",e.BlockUser="block_user"}(M||(M={}));const H=({notificationType:e,notificationId:t,isViewed:i,isClicked:s})=>({notification:{type:e},inbox:{id:t,is_viewed:i,is_clicked:s},screen:{height:window.screen.height,width:window.screen.width}}),F=({notificationType:e,notificationId:i,isViewed:s,isClicked:n,action:o,noun:a,actionInfo:r})=>t({source:"inbox",action:o,noun:a},{...H({notificationType:e,notificationId:i,isViewed:s,isClicked:n}),...r&&{action_info:r}}),V=e=>$({...e,noun:"overflow_option"}),$=({notificationType:e,notificationId:t,isViewed:i,isClicked:s,noun:n,action:o="click",action_info_type:a})=>F({action:o,noun:n,notificationType:e,notificationId:t,isViewed:i,isClicked:s,actionInfo:a?{type:a}:void 0}),q=e=>Array.from(document.querySelectorAll('[data-id="notification-item-prevent-link"]')).some((t=>t.contains(e.target)));var j,Y,J;!function(e){e.Popover="popover",e.Route="route"}(j||(j={})),function(e){e.NumNotifications="numNotifications",e.RenderType="renderType"}(Y||(Y={})),function(e){e.CursorForNextPage="nextPageCursor",e.HasRenderedEarlierHeader="hasRenderedEarlierHeader"}(J||(J={}));N(`/svc/shreddit/notifications-inbox-content/:${Y.NumNotifications}/:${Y.RenderType}`);const z=new Set([n.CommentReply,n.PostReply,n.PrivateMessage,n.UsernameMention]);function W(e,t,i){window.Sentry?.captureMessage?.(`Unexpected inbox mark as read error id: ${t}, type: ${i}, err: ${JSON.stringify(e)}`)}let G=class extends(o(a(P))){constructor(){super(...arguments),this.isViewed=!1,this.isDeletedPost=!1,this.isRemovedPost=!1,this.notificationId="",this.messageType="",this.hasLink="",this.isHidden=!1,this.observer=null,this.handleVisibilityChange=([{isIntersecting:e}])=>{var t;e&&!this.isViewed&&(this.trackEvent((t=this.getTrackEventProperties(),F({...t,noun:"inbox_notification",action:"view"}))),this.isViewed=!0,this.observer?.disconnect())},this.hideIfIsSelf=e=>{e===this.notificationId&&this.hide()},this.hide=()=>this.isHidden=!0,this.onClick=async e=>{(!this.hasLink||this.isDeletedPost||this.isRemovedPost||q(e))&&e.preventDefault();return!!e.target?.closest("notification-context-menu")||this.trackEvent((({notificationType:e,notificationId:t,isViewed:i,isClicked:s,clickTarget:n})=>F({action:"click",noun:"inbox_notification",notificationType:e,notificationId:t,isViewed:i,isClicked:s,actionInfo:{position:"cta"===n?2:1}}))({...this.getTrackEventProperties(),clickTarget:"notification"})),this.isDeletedPost?this.showAlert({message:"Sorry this post was deleted"}):this.isRemovedPost&&this.showAlert({message:"This content is no longer available"}),await this.fireReadEvent(),!1},this.getUnreadChildElement=()=>this.querySelector(".unread-notification"),this.fireReadEvent=async()=>{this.getUnreadChildElement()&&(this.removeUnreadState(),await async function(e,t){if(e)try{let n;z.has(t)?(n=await i({operation:s.MarkPrivateMessageAsRead,variables:{input:{messageId:e}}}),W(n.data.markPrivateMessageAsRead?.errors,e,t)):(n=await i({operation:s.MarkNotificationRead,variables:{input:{notificationId:e}}}),W(n.data.readNotificationLoggedIn?.errors,e,t))}catch(e){}}(this.notificationId,this.messageType))},this.removeUnreadState=()=>this.getUnreadChildElement()?.classList.remove("unread-notification"),this.showAlert=({message:e})=>this.dispatchEvent(r("faceplate-alert",{level:d.warning,message:e})),this.getTrackEventProperties=()=>({notificationType:this.messageType,notificationId:this.notificationId,isViewed:this.isViewed,isClicked:!!this.getUnreadChildElement()})}connectedCallback(){super.connectedCallback(),this.observer=new IntersectionObserver(this.handleVisibilityChange,{root:document.querySelector('[data-id="notification-container-element"]'),threshold:.25}),this.observer.observe(this)}disconnectedCallback(){super.disconnectedCallback(),this.observer?.disconnect()}firstUpdated(){var e;this.trackEvent((e=this.getTrackEventProperties(),F({...e,noun:"inbox_notification",action:"receive"}))),this.querySelector("a")?.addEventListener("click",this.onClick),this.subscribe(c.NotificationInboxNotificationHideEvent,this.hideIfIsSelf),this.subscribe(c.InboxReadAllEvent,this.removeUnreadState)}render(){return this.isHidden?x:U`<slot></slot>`}};G.styles=[l],h([u({type:Boolean,attribute:"is-viewed",reflect:!0})],G.prototype,"isViewed",void 0),h([u({type:Boolean,attribute:"is-deleted-post"})],G.prototype,"isDeletedPost",void 0),h([u({type:Boolean,attribute:"is-removed-post"})],G.prototype,"isRemovedPost",void 0),h([u({type:String,attribute:"notification-id"})],G.prototype,"notificationId",void 0),h([u({type:String,attribute:"message-type"})],G.prototype,"messageType",void 0),h([u({type:Boolean,attribute:"has-link"})],G.prototype,"hasLink",void 0),h([p()],G.prototype,"isHidden",void 0),G=h([b("notification-item")],G);function K({currentStorageData:e,userId:t,inboxBannerName:i}){return e?.[t]?.find((e=>e.inboxBannerName===i))?.seenCount??0}function Q({userId:e,inboxBannerName:t,seenCount:i,currentStorageData:s={}}){const n={...s||{},[e]:[{inboxBannerName:t,seenCount:i}]};B("inbox_banner_seen_count_store",n)}let X=class extends P{constructor(){super(...arguments),this.isHidden=!1,this.colorMap={},this.hide=e=>{e.preventDefault(),this.isHidden=!0,this.userId&&this.name&&this.maxViews&&function({userId:e,inboxBannerName:t,seenCount:i}){Q({userId:e,currentStorageData:R("inbox_banner_seen_count_store"),inboxBannerName:t,seenCount:i})}({userId:this.userId,inboxBannerName:this.name,seenCount:this.maxViews})},this.onClick=e=>{q(e)&&e.preventDefault()}}firstUpdated(){if(this.querySelectorAll('[data-id="notification-dismissal-element"').forEach((e=>e.addEventListener("click",this.hide))),this.querySelectorAll("a").forEach((e=>e.addEventListener("click",this.onClick))),Object.entries(this.colorMap).forEach((([e,t])=>{this.style.setProperty(`--${e}`,t)})),this.userId&&this.name){const e=function({userId:e,inboxBannerName:t}){return K({userId:e,inboxBannerName:t,currentStorageData:R("inbox_banner_seen_count_store")})}({userId:this.userId,inboxBannerName:this.name});void 0!==this.maxViews&&e>=this.maxViews?this.isHidden=!0:function({userId:e,inboxBannerName:t}){const i=R("inbox_banner_seen_count_store");Q({userId:e,currentStorageData:i,inboxBannerName:t,seenCount:K({userId:e,inboxBannerName:t,currentStorageData:i})+1})}({userId:this.userId,inboxBannerName:this.name})}}render(){return this.isHidden?x:U`<slot></slot>`}};X.styles=[l],h([p()],X.prototype,"isHidden",void 0),h([u({type:Object})],X.prototype,"colorMap",void 0),h([u({type:String,attribute:"user-id"})],X.prototype,"userId",void 0),h([u({type:String})],X.prototype,"name",void 0),h([u({type:Number,attribute:"max-views"})],X.prototype,"maxViews",void 0),X=h([b("notification-inbox-banner")],X);const Z=({notificationLevel:e,isEnablingUpdates:t})=>{if(t)switch(e){case f.Off:case null:return f.Low;case f.Low:case f.Frequent:default:return f.Frequent}else switch(e){case f.Frequent:return f.Low;case f.Low:default:return f.Off}};let ee=class extends(o(a(P))){constructor(){super(...arguments),this.messageType="",this.notificationLevel=null,this.notificationId="",this.userId="",this.userName="",this.postId="",this.commentId="",this.subredditId="",this.subredditName="",this.isHideEligible=!1,this.isToggleUpdateFromSubredditEligible=!1,this.isToggleNotificationUpdateEligible=!1,this.isToggleLowUpdateFromSubredditEligible=!1,this.initialNotificationLevel=null,this.isNotificationLevelOff=()=>!this.notificationLevel||this.notificationLevel===f.Off,this.getIsRead=()=>!this.closest("notification-item")?.querySelector(".unread-notification"),this.shouldRenderHide=()=>this.isHideEligible,this.shouldRenderDisableUpdates=()=>this.isToggleNotificationUpdateEligible&&(this.postId||this.commentId),this.shouldRenderDisableUpdatesFromSubreddit=()=>this.subredditId&&this.isToggleUpdateFromSubredditEligible,this.shouldRenderBlockThisUser=()=>this.userId&&this.userName&&this.messageType&&[n.ChatAcceptInvite,n.ChatMessage,n.ChatMessageReaction,n.ChatRequest,n.AwardReceived].includes(this.messageType),this.shouldRenderSeeLessFromSubreddit=()=>this.subredditId&&this.isToggleLowUpdateFromSubredditEligible,this.hideNotification=async()=>{try{if((await i({operation:s.DeleteInboxNotifications,variables:{input:{notificationIds:[this.notificationId]}}})).data.deleteInboxNotifications?.ok)return this.showAlert({level:d.notice,message:"Success! You won't see updates on this in the future"}),void this.publish(c.NotificationInboxNotificationHideEvent,this.notificationId)}catch(e){window.Sentry?.captureMessage(e)}this.showAlert({})},this.changeUpdatesFromSubreddit=async e=>{try{this.notificationLevel=e?this.initialNotificationLevel:f.Off;if((await i({operation:s.UpdateSubredditNotificationSettings,variables:{input:{subredditId:this.subredditId,isUpdateFromSubredditEnabled:e,isSubredditUpdatesInterestingPostEnabled:!this.isNotificationLevelOff()}}})).data.updateSubredditNotificationSettings?.ok)return void this.handleAlerts({actionInfoType:M.HideSubreddit,isDo:!e,doConfig:{message:"Success! You won't see updates from this subreddit in the future.",undoOnClick:()=>this.changeUpdatesFromSubreddit(!0)},undoConfig:{message:"Success! Hiding updates from this subreddit has been undone."}})}catch(e){window.Sentry?.captureMessage(e)}this.notificationLevel=e?f.Off:this.initialNotificationLevel,this.showAlert({})},this.changeSeeLessFromSubreddit=async e=>{this.notificationLevel=Z({isEnablingUpdates:e,notificationLevel:this.notificationLevel});try{if((await i({operation:s.UpdateSubredditNotificationSettings,variables:{input:{subredditId:this.subredditId,isUpdateFromSubredditEnabled:!this.isNotificationLevelOff(),isSubredditUpdatesInterestingPostEnabled:e}}})).data.updateSubredditNotificationSettings?.ok)return void this.handleAlerts({actionInfoType:M.DisableNotificationType,isDo:!e,doConfig:{message:"Success! You'll see less from this subreddit in the future.",undoOnClick:()=>this.changeSeeLessFromSubreddit(!0)},undoConfig:{message:"Success! Seeing less from this subreddit has been undone."}})}catch(e){window.Sentry?.captureMessage(e)}this.notificationLevel=Z({isEnablingUpdates:!e,notificationLevel:this.notificationLevel}),this.showAlert({})},this.changeUpdatesOnThisPost=async e=>{try{if((await i({operation:s.UpdatePostSendRepliesState,variables:{input:{postId:this.postId,sendRepliesState:e?m.Send:m.DoNotSend}}})).data.updatePostSendRepliesState?.ok)return void this.handleAlerts({actionInfoType:M.HideUpdates,isDo:!e,doConfig:{message:"Success! You won't see updates on this post in the future.",undoOnClick:()=>this.changeUpdatesOnThisPost(!0)},undoConfig:{message:"Success! Hiding updates has been undone."}})}catch(e){window.Sentry?.captureMessage(e)}this.showAlert({})},this.changeUpdatesOnThisComment=async e=>{try{if((await i({operation:s.UpdateCommentSendRepliesState,variables:{input:{commentId:this.commentId,sendRepliesState:e?m.Send:m.DoNotSend}}})).data.updateCommentSendRepliesState?.ok)return void this.handleAlerts({actionInfoType:M.HideUpdates,isDo:!e,doConfig:{message:"Success! You won't see updates on this comment in the future.",undoOnClick:()=>this.changeUpdatesOnThisComment(!0)},undoConfig:{message:"Success! Hiding updates has been undone."}})}catch(e){window.Sentry?.captureMessage(e)}this.showAlert({})},this.changeUserBlockStatus=async e=>{try{if((await i({operation:s.UpdateRedditorBlockState,variables:{input:{redditorId:this.userId,blockState:e}}})).data.updateRedditorBlockState?.ok)return void this.handleAlerts({actionInfoType:M.BlockUser,isDo:e===g.Blocked,doConfig:{message:`u/${this.userName} is now blocked.`,undoOnClick:()=>this.changeUserBlockStatus(g.None)},undoConfig:{message:`u/${this.userName} is now unblocked.`}})}catch(e){window.Sentry?.captureMessage(e)}this.showAlert({})},this.handleAlerts=({isDo:e,actionInfoType:t,doConfig:i,undoConfig:s})=>{e?this.showAlert({level:d.notice,message:i.message,undoOnClick:i.undoOnClick,actionInfoType:t}):this.showAlert({level:d.notice,message:s.message})},this.showAlert=({level:e=d.error,message:t="Something went wrong",undoOnClick:i,actionInfoType:s})=>this.dispatchEvent(r("faceplate-alert",{level:e,message:t,namedContent:i&&s?{action:v({children:"Undo",attributes:{onclick:()=>{var e;i(),this.trackEvent((e=this.getTrackClickOptionProperties(s),$({...e,action:"undo",noun:"overflow_option"})))}}})}:void 0})),this.renderHideThisNotification=()=>this.renderMenuElement({label:"Hide",onClick:()=>(this.trackEvent(V(this.getTrackClickOptionProperties(M.HideNotification))),this.hideNotification()),dataTestId:"hide-this-notification"}),this.renderDisableUpdates=()=>this.renderMenuElement({label:"Turn off this type of notification",onClick:()=>(this.trackEvent(V(this.getTrackClickOptionProperties(M.HideUpdates))),this.postId?this.changeUpdatesOnThisPost(!1):this.changeUpdatesOnThisComment(!1)),dataTestId:"block-updates-from-post-or-comment"}),this.renderDisableUpdatesFromSubreddit=()=>this.renderMenuElement({label:this.subredditName?`Turn off r/${this.subredditName} notifications`:"Disable updates from this community",onClick:()=>(this.trackEvent(V(this.getTrackClickOptionProperties(M.HideSubreddit))),this.changeUpdatesFromSubreddit(!1)),dataTestId:"block-updates-from-subreddit"}),this.renderBlockThisUser=()=>this.renderMenuElement({label:"Block this user ",onClick:()=>(this.trackEvent(V(this.getTrackClickOptionProperties(M.BlockUser))),this.changeUserBlockStatus(g.Blocked)),dataTestId:"block-user"}),this.renderSeeLessFromSubreddit=()=>this.renderMenuElement({label:"See less from this community",onClick:()=>(this.trackEvent(V(this.getTrackClickOptionProperties(M.DisableNotificationType))),this.changeSeeLessFromSubreddit(!1)),dataTestId:"see-less"}),this.renderMenuElement=({label:e,onClick:t,dataTestId:i})=>U`\n ${O({onClick:t,label:e,attributes:{role:"menuitem","data-testid":i}})}\n `,this.onOpenMenu=()=>{return this.trackEvent((e=this.getTrackEventProperties(),$({...e,noun:"inbox_notification_overflow"})));var e},this.getTrackClickOptionProperties=e=>({...this.getTrackEventProperties(),action_info_type:e}),this.getTrackEventProperties=()=>({notificationId:this.notificationId,notificationType:this.messageType,isViewed:!0,isClicked:this.getIsRead()})}render(){const e=[this.shouldRenderHide()?this.renderHideThisNotification():null,this.shouldRenderSeeLessFromSubreddit()?this.renderSeeLessFromSubreddit():null,this.shouldRenderDisableUpdates()?this.renderDisableUpdates():null,this.shouldRenderBlockThisUser()?this.renderBlockThisUser():null,this.shouldRenderDisableUpdatesFromSubreddit()?this.renderDisableUpdatesFromSubreddit():null].filter(Boolean);return 0===e.length?x:U`\n <faceplate-dropdown-menu position="bottom-end">\n ${v({appearance:"plain",attributes:{"aria-label":"Open notification actions"},leadingIcon:L({size:A.Small}),size:k.Small})}\n <faceplate-tracker \n slot="menu" \n source="${"inbox"}" \n action="view" \n noun="${"inbox_notification_overflow"}" \n data-faceplate-tracking-context="${JSON.stringify(H(this.getTrackEventProperties()))}" \n>\n <faceplate-menu slot="menu" class="block bg-neutral-background">\n ${e}\n </faceplate-menu>\n </faceplate-tracker>\n </faceplate-dropdown-menu>\n `}};ee.styles=[l],h([u({type:String,attribute:"message-type"})],ee.prototype,"messageType",void 0),h([u({type:String,attribute:"notification-level",reflect:!0})],ee.prototype,"notificationLevel",void 0),h([u({type:String,attribute:"notification-id"})],ee.prototype,"notificationId",void 0),h([u({type:String,attribute:"user-id"})],ee.prototype,"userId",void 0),h([u({type:String,attribute:"user-name"})],ee.prototype,"userName",void 0),h([u({type:String,attribute:"post-id"})],ee.prototype,"postId",void 0),h([u({type:String,attribute:"comment-id"})],ee.prototype,"commentId",void 0),h([u({type:String,attribute:"subreddit-id"})],ee.prototype,"subredditId",void 0),h([u({type:String,attribute:"subreddit-name"})],ee.prototype,"subredditName",void 0),h([u({type:Boolean,attribute:"is-hide-eligible"})],ee.prototype,"isHideEligible",void 0),h([u({type:Boolean,attribute:"is-toggle-update-from-subreddit-eligible"})],ee.prototype,"isToggleUpdateFromSubredditEligible",void 0),h([u({type:Boolean,attribute:"is-toggle-notification-update-eligible"})],ee.prototype,"isToggleNotificationUpdateEligible",void 0),h([u({type:Boolean,attribute:"is-toggle-low-update-from-subreddit-eligible"})],ee.prototype,"isToggleLowUpdateFromSubredditEligible",void 0),ee=h([b("notification-context-menu")],ee);let te=class extends y{constructor(){super(...arguments),this.trackExitEvent=()=>{this.trackEvent()}}get miniInboxTooltip(){return document.querySelector("#mini-inbox-tooltip")}connectedCallback(){super.connectedCallback(),this.source="inbox",this.action="exit",this.noun="mini_inbox",this.miniInboxTooltip?.addEventListener(this.closeEventName,this.trackExitEvent)}disconnectedCallback(){super.disconnectedCallback(),this.miniInboxTooltip?.removeEventListener(this.closeEventName,this.trackExitEvent)}get closeEventName(){return`${this.miniInboxTooltip?.tagName.toLowerCase()}:close`}};te=h([b("notification-inbox-exit-tracker")],te);let ie=class extends(o(P)){constructor(){super(...arguments),this.fireReadAll=async()=>{try{this.trackEvent((({badgeCount:e})=>t({source:"inbox",action:"click",noun:"mark_all_as_read"},{action_info:{type:e.toString()}}))({badgeCount:this.getUnreadCount()})),S(c.InboxReadAllEvent),S(c.InboxCountChanged,0);(await i({operation:s.MarkPrivateMessageAsRead,variables:{input:{}}})).data.markPrivateMessageAsRead?.ok||this.dispatchErrorMessage()}catch(e){this.dispatchErrorMessage()}},this.getUnreadCount=()=>document.querySelector('[data-id="notification-count-element"]')?.getCount()??0,this.dispatchErrorMessage=()=>{this.dispatchEvent(r("faceplate-alert",{level:d.error,message:"Something went wrong while marking all notifications as read"}))}}firstUpdated(){this.querySelector("*")?.addEventListener("click",this.fireReadAll)}render(){return U` <slot></slot> `}};ie=h([b("mark-all-messages-read")],ie);let se=class extends P{constructor(){super(...arguments),this.initialMessagesCount=0}async firstUpdated(){S(c.InboxCountChanged,this.initialMessagesCount),this.initialMessagesCount?navigator.setAppBadge?.(this.initialMessagesCount):navigator.clearAppBadge?.(),await i({operation:s.UpdateInboxActivitySeenState,variables:{input:{lastSentAt:(new Date).toISOString()}}})}render(){return x}};h([u({type:Number,attribute:"initial-messages-count"})],se.prototype,"initialMessagesCount",void 0),se=h([b("mark-all-notifications-seen")],se);const ne=e=>t({source:"popup",action:e,noun:"desktop_notification_permissions"}),oe="Notification"in globalThis?Notification:null;let ae=class extends(o(P)){constructor(){super(),this.variant="banner_once",this.statusPending=!0,this._notificationApi=oe,this._swAPI=navigator.serviceWorker,this.onEnable=async()=>{await this._setupPushNotifications()?(this.trackEvent(ne("allow")),this.trackEvent(t({source:"overlay",action:"auto_dismiss",noun:"desktop_notification_permissions"})),this.remove()):await this._getPushNotificationStatus()===w.Blocked&&this.trackEvent(ne("block"))},this.onDecline=()=>{this.trackEvent(ne("close"));const e=this._getLocalStorage()||{};e.last_dismissed=Date.now(),this._setLocalStorage(e),this.remove()},this.onClose=()=>{this.trackEvent(ne("close")),this.remove()}}async connectedCallback(){super.connectedCallback();const e=await this._getPushNotificationStatus();switch(this.statusPending=!1,e){case w.Blocked:case w.Error:this._unsubscribePushSubscription()}if(this.isThrottled())return this.remove();switch(e){case w.Blocked:case w.Pending:case w.NoSubscription:case w.Error:return this._checkAndUpdateLocalStorage(),void this.trackEvent(ne("view"));case w.NoServiceWorker:case w.NoPushManager:case w.NoNotificationAPI:case w.Enabled:return this.remove()}}_getPushNotificationStatus(){return I(this._swAPI,this._notificationApi)}_setupPushNotifications(){return C(this._swAPI,this._notificationApi)}_unsubscribePushSubscription(){return E(this._swAPI)}_getLocalStorage(){return JSON.parse(_.getItem("pn_banner_state")??"null")}_setLocalStorage(e){return _.setItem("pn_banner_state",JSON.stringify(e))}_checkAndUpdateLocalStorage(){const e=this._getLocalStorage()??{};(!e.last_seen||Date.now()-e.last_seen>36e5)&&(e.last_seen=Date.now(),this._setLocalStorage(e))}isThrottled(){const e=this._getLocalStorage();if(!e)return!1;if(!e.last_dismissed&&!e.last_seen)return!1;if(e.last_seen&&!e.last_dismissed){const t=Date.now()-e.last_seen;if(t>36e5&&t<828e5)return!0}if(!e.last_dismissed)return!1;switch(this.variant){case"banner_once":return!0;case"banner_weekly":return Date.now()-e.last_dismissed<6012e5;case"banner_monthly":return Date.now()-e.last_dismissed<24156e5}return!1}render(){return this.statusPending?x:U`\n <div class="rounded-sm border-sm border-tone-4 border-solid p-md mx-md mb-md relative">\n <p class="font-semibold text-20 my-0">\n Enable Push Notifications\n ${v({appearance:"secondary",shape:"pill",leadingIcon:D({size:A.ExtraSmall}),size:k.ExtraSmall,attributes:{"aria-label":"Dismiss push notification prompt",className:"absolute top-xs right-xs",onclick:this.onClose}})}\n </p>\n <p class="text-14">\n Don't miss out on updates.\n </p>\n <div class="flex flex-row gap-lg">\n ${v({appearance:"primary",attributes:{onclick:this.onEnable},children:"Turn On"})}\n ${v({appearance:"secondary",attributes:{onclick:this.onDecline},children:"No Thanks"})}\n </div>\n </div>\n `}};ae.styles=l,h([u()],ae.prototype,"variant",void 0),h([T("rpl-dialog")],ae.prototype,"unblockDialog",void 0),h([p()],ae.prototype,"statusPending",void 0),ae=h([b("shreddit-pn-banner")],ae);
//# sourceMappingURL=notifications-inbox-client-js-5449cb66.js.map
