import"./shreddit-feed-f8398545.js";import"./shreddit-post-translator-cd30db72.js";import"./reddit-page-data-71c78cf8.js";import"./shreddit-share-list-item-92d025d2.js";import"./faceplate-hovercard-99b1d0ca.js";import"./open-interstitial-modal-40fe4584.js";import"./confirm-over-18-34298130.js";import{s as t,x as e,I as i,A as s,i as o,aI as a,bs as n,bt as r}from"./icon-04f6a077.js";import"./faceplate-modal-b5af7f91.js";import"./faceplate-auto-height-animator-bdf27952.js";import"./guard-community-modal-77f0a904.js";import{f as d,_ as c,t as p,e as l,a as u,q as b,n as m,c as h,ay as f,eS as y,b as g,l as v,ao as j,W as S,w as $,cb as C,r as x,L as k,J as E,eT as w,bf as z,eU as P}from"./shell-ceb66a5c.js";import{F as N}from"./index-b72f6ee8.js";import"./faceplate-banner-0aaedee7.js";import"./faceplate-textarea-input-25459e07.js";import"./faceplate-text-input-999c3dd8.js";import"./faceplate-form-494ed7ef.js";import"./community-appearance-entrypoint-e78e3e24.js";import"./user-mod-actions-bottom-sheet-6aa0accf.js";import"./community-status-bottom-sheet-feecb515.js";import"./protected-community-modal-trigger-abd6a7c1.js";import"./faceplate-shimmer-2aa9ab87.js";import{a as B}from"./community-highlight-card-71faa8df.js";import{C as I}from"./feeds-147f777f.js";import{P as D}from"./postUpdate-341e461e.js";import"./create-post-entry-point-wrapper-bba25038.js";import"./throttle-cde4a556.js";import"./index-da7f9a8b.js";import"./index-6b599370.js";import"./translation-feedback-modal-9564737e.js";import"./translations-b6dcf880.js";import"./faceplate-bottom-sheet-d2dd0726.js";import"./TinyGesture-6f7cc1aa.js";import"./base-translator-f21065f6.js";import"./index-be60000a.js";import"./post-d6ddae05.js";import"./translation-intervention-modal-04160bbd.js";import"./with-share-daaf701c.js";import"./a-38b76b01.js";import"./content-action-button-3141f70f.js";import"./list-item-b879d870.js";import"./index-6b6f75e3.js";import"./popper-controller-d9d10574.js";import"./makeEventDispatcher-28989282.js";import"./faceplate-tooltip-f3cee611.js";import"./index-dee8dbf2.js";import"./live-2ab1644c.js";import"./text-input-5a8d8b87.js";import"./form-common-utils-d3476c65.js";import"./faceplate-input-dc5282a4.js";import"./input-element-2bee98eb.js";import"./faceplate-switch-input-17cfc01a.js";import"./checked-input-element-a822f47d.js";import"./shreddit-pubsub-publisher-08f7aa57.js";import"./faceplate-bottom-sheet-header-880587a2.js";import"./faceplate-menu-210a1c41.js";import"./user-mod-actions-76fb5e5e.js";import"./moderation-f92f94b3.js";import"./index-acd0ab6e.js";import"./community-status-telemetry-8bffca32.js";import"./modActions-6dc6da5e.js";import"./subreddit-posting-eligibility-813b81dc.js";const A=d(t);let _=class extends A{constructor(){super(...arguments),this.bannerEventData=null}static get styles(){return[u]}connectedCallback(){super.connectedCallback(),this.subscribe(b.TriggerFeedErrorBanner,(t=>{t.type===N.Show?this.bannerEventData=t.data??null:this.bannerEventData=null}))}render(){if(!this.bannerEventData)return"";const{multiLine:t,msg:i,appearance:s,shape:o,className:a,children:n}=this.bannerEventData;return e` <faceplate-banner \n class="${a}" \n ?multiLine="${t}" \n appearance="${s}" \n shape="${o}" \n msg="${i}" \n>\n ${n}\n </faceplate-banner>`}};c([p()],_.prototype,"bannerEventData",void 0),_=c([l("shreddit-feed-error-banner")],_);const M=d(t);let L=class extends M{constructor(){super(...arguments),this.name="",this.subredditId="",this.prefixedName="",this.notificationLevel="",this.isModerator=!1,this.hasModqueueAccess=!1,this.isSubscribed=!1,this.isMuted=!1,this.isFavorite=!1,this.isUserLoggedIn=!1,this.hasCustomActions=!1,this.buttonSize=h.Small,this.iconSize=i.Small,this.isCustomFeedEnabled=!1,this.isPaidSubscriptionsEnabled=!1,this.isPaidSubscriber=!1,this.onSubscriptionChange=t=>{this.name===t.name&&(this.isSubscribed=t.subscribed)},this.activateCommunitySubscriptionPurchaseDialog=async()=>{this.subredditId&&await f({name:y,routeParams:{subredditId:this.subredditId}})}}static get styles(){return[u]}firstUpdated(){this.subscribe(b.SubredditSubscriptionChange,this.onSubscriptionChange)}disconnectedCallback(){super.disconnectedCallback(),this.unsubscribe(b.SubredditSubscriptionChange,this.onSubscriptionChange)}renderPrimaryButton(){return this.isModerator?g({appearance:"primary",size:this.buttonSize,attributes:{href:this.hasModqueueAccess?`/mod/${this.name}/queue`:`/mod/${this.name}/insights`,className:"modtools-btn"},children:"Mod Tools"}):this.isSubscribed&&this.isPaidSubscriptionsEnabled?g({appearance:"primary",size:this.buttonSize,attributes:{onclick:this.activateCommunitySubscriptionPurchaseDialog},children:"Subscribe"}):e`<faceplate-tracker \n source="community" \n action="click" \n noun="${this.isSubscribed?"unsubscribe":"subscribe"}" \n>\n <shreddit-join-button \n name="${this.name}" \n subreddit-id="${this.subredditId}" \n button-classes="px-sm py-xs" \n buttonsize="${this.buttonSize===h.Medium?"medium":"small"}" \n subscribe-label="Join" \n unsubscribe-label="Joined" \n unsubscribe-button-type-override="bordered" \n ?subscribed="${this.isSubscribed}" \n></shreddit-join-button></faceplate-tracker>`}render(){return e` <div class="flex items-center gap-sm">\n ${this.isSubscribed?e`<shreddit-notification-frequency-control \n subreddit-id="${this.subredditId}" \n notification-level="${this.notificationLevel}" \n button-size="${this.buttonSize}" \n icon-size="${this.iconSize}" \n></shreddit-notification-frequency-control>`:s}\n ${this.renderPrimaryButton()}\n ${this.isUserLoggedIn||this.hasCustomActions?e`<shreddit-subreddit-overflow-control \n name="${this.name}" \n prefixed-name="${this.prefixedName}" \n subreddit-id="${this.subredditId}" \n button-size="${this.buttonSize}" \n icon-size="${this.iconSize}" \n ?is-muted="${this.isMuted}" \n ?is-favorite="${this.isFavorite}" \n ?subscribed="${this.isSubscribed}" \n ?show-join-button="${this.isModerator}" \n ?is-user-logged-in="${this.isUserLoggedIn}" \n ?allow-custom-feed="${this.isCustomFeedEnabled}" \n>\n <slot name="devvit-context-actions" slot="devvit-context-actions"></slot>\n </shreddit-subreddit-overflow-control>`:s}\n </div>`}};c([m({type:String})],L.prototype,"name",void 0),c([m({type:String,attribute:"subreddit-id"})],L.prototype,"subredditId",void 0),c([m({type:String,attribute:"prefixed-name"})],L.prototype,"prefixedName",void 0),c([m({type:String,attribute:"notification-level"})],L.prototype,"notificationLevel",void 0),c([m({type:Boolean,attribute:"is-moderator"})],L.prototype,"isModerator",void 0),c([m({type:Boolean,attribute:"modqueue-access"})],L.prototype,"hasModqueueAccess",void 0),c([m({type:Boolean,attribute:"is-subscribed"})],L.prototype,"isSubscribed",void 0),c([m({type:Boolean,attribute:"is-muted"})],L.prototype,"isMuted",void 0),c([m({type:Boolean,attribute:"is-favorite"})],L.prototype,"isFavorite",void 0),c([m({type:Boolean,attribute:"is-user-logged-in"})],L.prototype,"isUserLoggedIn",void 0),c([m({type:Boolean,attribute:"has-custom-actions"})],L.prototype,"hasCustomActions",void 0),c([m({type:String,attribute:"button-size"})],L.prototype,"buttonSize",void 0),c([m({type:String,attribute:"icon-size"})],L.prototype,"iconSize",void 0),c([m({type:Boolean,attribute:"allow-custom-feed"})],L.prototype,"isCustomFeedEnabled",void 0),c([m({type:Boolean,attribute:"is-paid-subscriptions-enabled"})],L.prototype,"isPaidSubscriptionsEnabled",void 0),c([m({type:Boolean,attribute:"is-paid-subscriber"})],L.prototype,"isPaidSubscriber",void 0),L=c([l("shreddit-subreddit-header-buttons")],L);const q="community_highlights",U="collapse",T="expand";function F(t){return{subreddit:{name:t.subredditName},action_info:{page_type:j.Community}}}const H=S(t);let V=class extends H{constructor(){super(...arguments),this.subredditName="",this.feedViewType=C.ModQueueCompactView,this.isEditable=!1,this.isCollapsed=!1,this.pubSub=new x(this),this.viewedPosts=new Set,this.toggle=()=>{this.isCollapsed=!this.isCollapsed;const t=this.isCollapsed?(e={subredditName:this.subredditName},v({source:q,action:"click",noun:U},F(e))):(t=>v({source:q,action:"click",noun:T},F(t)))({subredditName:this.subredditName});var e;this.trackEvent(t)},this._reload=async()=>{if(!this.subredditName)return;const t=I.replace(":subredditName",this.subredditName),e=document.createElement("faceplate-partial");e.setAttribute("slot","content"),e.setAttribute("loading",k.Programmatic),e.setAttribute("src",t);const i=this.contentsSlot?.assignedElements({flatten:!0})||[];Array.from(i).forEach((t=>t.removeAttribute("slot"))),e.append(...i),this.appendChild(e),await e.load()},this._onPostUpdate=({action:t,postId:e})=>{if(t!==D.delete)return;this.querySelector(`community-highlight-card#${B(e)}`)&&this._reload()}}connectedCallback(){super.connectedCallback(),requestAnimationFrame((()=>{this.pubSub.subscribe(b.ReloadHighlights,this._reload),this.pubSub.subscribe(b.PostUpdated,this._onPostUpdate)}))}disconnectedCallback(){super.disconnectedCallback(),this.pubSub.unsubscribe(b.ReloadHighlights,this._reload),this.pubSub.unsubscribe(b.PostUpdated,this._onPostUpdate)}onTrack(t){if("post/view/post"!==t.SAN)return;const e=t.target instanceof HTMLElement?t.target.id:null;return e?this.viewedPosts.has(e)?(t.preventDefault(),void t.stopImmediatePropagation()):void this.viewedPosts.add(e):void 0}renderHeader(){const t=this.feedViewType===C.CompactView;return e`\n <button \n class="flex w-full bg-transparent hover:bg-neutral-background-hover border-none p-0 justify-between items-center cursor-pointer font-sans rounded-[12px] text-secondary-plain" \n aria-label="collapse/expand community highlights" \n @click="${this.toggle}" \n>\n <slot name="title"></slot>\n\n <div \n class="flex gap-sm py-2xs pr-md ${t?"xs:pr-2xs":""}" \n @click="${t=>t.stopPropagation()}" \n @keydown="${t=>t.stopPropagation()}" \n>\n ${this.isEditable?this.renderEditButton():""} ${this.renderCollapseButton()}\n </div>\n </button>\n `}renderEditButton(){return e`\n <activate-feature \n reactivatable\n render-mode="${E.Contents}" \n name="${w}" \n route-params="${JSON.stringify({subredditName:this.subredditName})}" \n activation="${k.Action}" \n>\n ${g({appearance:"secondary",size:h.ExtraSmall,leadingIcon:a({size:i.ExtraSmall}),attributes:{"aria-label":"Edit community highlights"}})}\n </activate-feature>\n `}renderCollapseButton(){return g({appearance:"plain",size:h.ExtraSmall,leadingIcon:this.isCollapsed?n({size:i.ExtraSmall}):r({size:i.ExtraSmall}),attributes:{"aria-label":"collapse/expand community highlights",onclick:this.toggle}})}render(){return e`\n ${this.renderHeader()}\n ${this.isCollapsed?"":e` <slot name="content" @faceplate-track="${this.onTrack}"></slot> `}\n `}};V.styles=[o`:host{display:block}`,u],c([m({type:String,attribute:"subreddit-name"})],V.prototype,"subredditName",void 0),c([m({type:String,attribute:"feed-view-type"})],V.prototype,"feedViewType",void 0),c([m({type:Boolean,attribute:"editable"})],V.prototype,"isEditable",void 0),c([p()],V.prototype,"isCollapsed",void 0),c([$('slot[name="content"]')],V.prototype,"contentsSlot",void 0),V=c([l("community-highlight-carousel")],V);let J=class extends(S(t)){constructor(){super(...arguments),this.country="",this.isDismissed=!1,this.handleDismiss=()=>{this.isDismissed=!0,z({country:this.country,name:P,value:"true"});const t=v({source:"chat_feed_upsell",action:"dismiss",noun:"chat_feed_upsell"});this.trackEvent(t)}}connectedCallback(){super.connectedCallback(),this.querySelector('[data-test-id="upsell-dismiss-button"]')?.addEventListener("click",this.handleDismiss)}disconnectedCallback(){super.disconnectedCallback(),this.querySelector('[data-test-id="upsell-dismiss-button"]')?.removeEventListener("click",this.handleDismiss)}render(){return this.isDismissed?s:e`<slot></slot>`}};c([m({type:String})],J.prototype,"country",void 0),c([p()],J.prototype,"isDismissed",void 0),J=c([l("subreddit-feed-channel-upsell")],J);
//# sourceMappingURL=subreddit-feed-client-js-e0c1808c.js.map
